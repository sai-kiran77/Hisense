{"version":3,"file":"src_app_pages_spinner_spinner_module_ts.js","mappings":"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GhB,yDAAY;QACZ,qDAAc;;;;;;;;;;;;;;;;;;;;AClBiB;AAC8C;;AAEzC;AACxC;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA,+BAA+B,uDAAY;AAC3C,kCAAkC,uDAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,IAAI;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,uCAAuC,+DAAwB,GAAG,+DAA+D,8VAA8V,aAAa,8DAA8D,yIAAyI;AACnrB,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,0EAA0E,+CAA+C;AAClJ,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,MAAM;AACN,QAAQ,wDAAiB;AACzB,OAAO,oBAAoB;AAC3B,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;AACA,iDAAU;AACV,IAAI,qDAAM;AACV;;AAEA;AACA;AACA,2DAA2D;AAC3D,oCAAoC,8DAAuB,GAAG,sBAAsB;AACpF,oCAAoC,8DAAuB,GAAG,eAAe;AAC7E,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;AAChB,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,mBAAmB,iEAAiE,IAAI;;AAEnL;AACA;AACA;;AAEA;AACA;AACA;;AAE6E;;;;;;;;;;;;;;;;AC5M7E;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA","sources":["./src/app/pages/spinner/spinner.component.ts","./src/app/pages/spinner/spinner.component.html","./src/app/pages/spinner/spinner.module.ts","./node_modules/ngx-wheel/__ivy_ngcc__/fesm2015/ngx-wheel.js","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\r\nimport { Component, Inject, OnInit, PLATFORM_ID, ViewChild } from '@angular/core';\r\nimport { Routes } from '@angular/router';\r\nimport { NgxWheelComponent, TextAlignment, TextOrientation } from 'ngx-wheel';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss']\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n\r\n  width;\r\n  height;\r\n\r\n  @ViewChild(NgxWheelComponent, { static: false }) wheel: any;\r\n  @ViewChild('myaudio', { static: false }) audio: any;\r\n\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      if (window.innerWidth <= 768) {\r\n        this.height = 400;\r\n        this.width = 400;\r\n      } else {\r\n        this.height = 500;\r\n        this.width = 500;\r\n      }\r\n    }\r\n  }\r\n\r\n  seed = [...Array(12).keys()];\r\n  idToLandOn: any;\r\n  items: any[] = [];\r\n  textOrientation: TextOrientation = TextOrientation.HORIZONTAL;\r\n  textAlignment: TextAlignment = TextAlignment.OUTER;\r\n\r\n  ngOnInit() {\r\n    this.idToLandOn = this.seed[Math.floor(Math.random() * this.seed.length)];\r\n    const colors = [\"rgb(141,1,248)\", \"rgb(202,1,111)\", \"rgb(251,53,1)\", \"rgb(252,158,2)\", \"rgb(254,129,3)\", \"rgb(98,197,47)\", \"rgb(7,96,237)\", \"rgb(44,19,248)\",];\r\n    this.items = this.seed.map((value, i) => ({\r\n      fillStyle: colors[i] ? colors[i] : colors[i - colors.length],\r\n      // fillStyle: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\r\n      text: `Prize ${value}`,\r\n      id: value,\r\n      textFillStyle: \"white\",\r\n      textFontSize: \"16\"\r\n    }));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // console.log(this.wheel);\r\n  }\r\n\r\n  reset() {\r\n    this.wheel.reset();\r\n  }\r\n  before() {\r\n    // alert(\"Your wheel is about to spin\");\r\n  }\r\n\r\n  async spin(prize?: any) {\r\n    if (prize) {\r\n      this.idToLandOn = prize;\r\n    } else {\r\n      this.idToLandOn = this.seed[Math.floor(Math.random() * this.seed.length)];\r\n    }\r\n    await new Promise((resolve) => setTimeout(resolve, 0));\r\n    this.wheel.spin();\r\n  }\r\n\r\n  after() {\r\n    // alert(\"You have been bamboozled\");\r\n    this.audio.nativeElement.play();\r\n    // audio.play();\r\n    setTimeout(() => {\r\n      alert(`Congratulations you have won Prize ${this.seed[this.idToLandOn]}`);\r\n    }, 750)\r\n    setTimeout(() => {\r\n      this.wheel.reset();\r\n      this.idToLandOn = this.seed[Math.floor(Math.random() * this.seed.length)];\r\n    }, 1000);\r\n  }\r\n\r\n  imageLoading = true;\r\n\r\n  imageLoaded() {\r\n    this.imageLoading = false;\r\n  }\r\n}\r\n","<div class=\"page__wrapper card\" [ngClass]=\"{'is-loading': imageLoading}\">\n    <img src=\"../../../assets/party.jpg\" (load)=\"imageLoaded()\" style=\"display: none;\">\n    <ng-container *ngIf=\"!imageLoading\">\n        <h1>Wheel of Fortune</h1>\n        <h3>Try your luck by participating below</h3>\n        <div class=\"spinner__wrapper\">\n            <div class=\"icon\" (click)=\"spin()\">\n                <div class=\"absolute spin-btn-wrap\">\n                    <button type=\"button\"\n                        class=\"aha-button spinner-wheel-spin-button spin-btn aha-button-xs aha-button-primary\">\n                        <svg width=\"40\" height=\"40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" name=\"play\"\n                            class=\"path-fill-current inline-block\" viewBox=\"0 0 22 24\">\n                            <path\n                                d=\"M19.669 10.385L6.199 2.257c-1.094-.66-2.77-.02-2.77 1.613v16.253c0 1.465 1.557 2.348 2.77 1.613l13.47-8.124c1.201-.723 1.205-2.504 0-3.227z\"\n                                fill=\"#fff\"></path>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            <ng-container *ngIf=\"width && height\">\n                <ngx-wheel Roulette [width]=\"width\" [height]=\"height\" [spinDuration]=\"8\" [items]=\"items\" [innerRadius]=\"20\"\n                    [spinAmount]=\"10\" [textOrientation]=\"textOrientation\" [textAlignment]=\"textAlignment\"\n                    pointerStrokeColor=\"white\" [pointerFillColor]=\"'rgba(59,130,246,0.5)'\" [idToLandOn]=\"idToLandOn\"\n                    (onSpinStart)=\"before()\" (onSpinComplete)=\"after()\">\n                </ngx-wheel>\n            </ng-container>\n        </div>\n    </ng-container>\n</div>\n\n<audio #myaudio id=\"myAudio\">\n    <source src=\"../../../assets/audio/mixkit-fantasy-game-success-notification-270.wav\" type=\"audio/ogg\">\n    Your browser does not support the audio element.\n</audio>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpinnerComponent } from './spinner.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgxWheelModule } from 'ngx-wheel';\n\nconst routes: Routes = [\n  {\n    path: '', component: SpinnerComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    SpinnerComponent\n  ],\n  imports: [\n    CommonModule,\n    NgxWheelModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class SpinnerModule { }\n","import { __decorate } from 'tslib';\nimport { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nvar TextAlignment;\n(function (TextAlignment) {\n    TextAlignment[\"INNER\"] = \"inner\";\n    TextAlignment[\"OUTER\"] = \"outer\";\n    TextAlignment[\"CENTER\"] = \"center\";\n})(TextAlignment || (TextAlignment = {}));\nvar TextOrientation;\n(function (TextOrientation) {\n    TextOrientation[\"HORIZONTAL\"] = \"horizontal\";\n    TextOrientation[\"VERTICAL\"] = \"vertical\";\n    TextOrientation[\"CURVED\"] = \"curved\";\n})(TextOrientation || (TextOrientation = {}));\nlet NgxWheelComponent = class NgxWheelComponent {\n    constructor() {\n        this.onSpinStart = new EventEmitter();\n        this.onSpinComplete = new EventEmitter();\n        this.completedSpin = false;\n        this.isSpinning = false;\n    }\n    reset() {\n        this.wheel.stopAnimation(false);\n        this.wheel.rotationAngle = 0;\n        this.wheel.ctx.clearRect(0, 0, this.wheel.ctx.canvas.width, this.wheel.ctx.canvas.height);\n        this.isSpinning = false;\n        this.completedSpin = false;\n        this.ngAfterViewInit();\n    }\n    ngOnInit() {\n    }\n    spin() {\n        if (this.completedSpin || this.isSpinning)\n            return;\n        this.isSpinning = true;\n        this.onSpinStart.emit(null);\n        const segmentToLandOn = this.wheel.segments.filter(x => !!x).find(({ id }) => this.idToLandOn === id);\n        const segmentTheta = segmentToLandOn.endAngle - segmentToLandOn.startAngle;\n        this.wheel.animation.stopAngle = segmentToLandOn.endAngle - (segmentTheta / 4);\n        this.wheel.startAnimation();\n        setTimeout(() => {\n            this.completedSpin = true;\n            this.onSpinComplete.emit(null);\n        }, this.spinDuration * 1000);\n    }\n    ngAfterViewInit() {\n        const segments = this.items;\n        // @ts-ignore\n        this.wheel = new Winwheel({\n            numSegments: segments.length,\n            segments,\n            innerRadius: this.innerRadius || 0,\n            outerRadius: (this.height / 2) - 20,\n            centerY: (this.height / 2) + 20,\n            textOrientation: this.textOrientation,\n            textAligment: this.textAlignment,\n            animation: {\n                type: 'spinToStop',\n                duration: this.spinDuration,\n                spins: this.spinAmount // The number of complete 360 degree rotations the wheel is to do.\n            }\n        });\n        // @ts-ignore\n        TweenMax.ticker.addEventListener(\"tick\", this.drawPointer.bind(this));\n    }\n    ngOnDestroy() {\n        // @ts-ignore\n        TweenMax.ticker.removeEventListener(\"tick\");\n    }\n    drawPointer() {\n        let c = this.wheel.ctx;\n        // Create pointer.\n        if (c) {\n            c.save();\n            c.lineWidth = 2;\n            c.strokeStyle = this.pointerStrokeColor;\n            c.fillStyle = this.pointerFillColor;\n            c.beginPath();\n            c.moveTo((this.width / 2) - 20, 2);\n            c.lineTo((this.width / 2) + 20, 2);\n            c.lineTo((this.width / 2), 42);\n            c.lineTo((this.width / 2) - 20, 2);\n            c.stroke();\n            c.fill();\n            c.restore();\n        }\n    }\n};\nNgxWheelComponent.ɵfac = function NgxWheelComponent_Factory(t) { return new (t || NgxWheelComponent)(); };\nNgxWheelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxWheelComponent, selectors: [[\"ngx-wheel\"]], inputs: { height: \"height\", idToLandOn: \"idToLandOn\", width: \"width\", items: \"items\", spinDuration: \"spinDuration\", spinAmount: \"spinAmount\", innerRadius: \"innerRadius\", pointerStrokeColor: \"pointerStrokeColor\", pointerFillColor: \"pointerFillColor\", disableSpinOnClick: \"disableSpinOnClick\", textOrientation: \"textOrientation\", textAlignment: \"textAlignment\" }, outputs: { onSpinStart: \"onSpinStart\", onSpinComplete: \"onSpinComplete\" }, decls: 2, vars: 2, consts: [[\"id\", \"canvas\", 3, \"width\", \"height\", \"click\"]], template: function NgxWheelComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"canvas\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NgxWheelComponent_Template_canvas_click_0_listener() { return !ctx.disableSpinOnClick && ctx.spin(); });\n        ɵngcc0.ɵɵtext(1, \" \\u00A0\\u00A0\\u00A0\\u00A0Canvas not supported, use another browser. \");\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"width\", ctx.width)(\"height\", ctx.height);\n    } }, encapsulation: 2 });\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"height\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"idToLandOn\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"width\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"items\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"spinDuration\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"spinAmount\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"innerRadius\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"pointerStrokeColor\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"pointerFillColor\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"disableSpinOnClick\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"textOrientation\", void 0);\n__decorate([\n    Input()\n], NgxWheelComponent.prototype, \"textAlignment\", void 0);\n__decorate([\n    Output()\n], NgxWheelComponent.prototype, \"onSpinStart\", void 0);\n__decorate([\n    Output()\n], NgxWheelComponent.prototype, \"onSpinComplete\", void 0);\n\nlet NgxWheelModule = class NgxWheelModule {\n};\nNgxWheelModule.ɵfac = function NgxWheelModule_Factory(t) { return new (t || NgxWheelModule)(); };\nNgxWheelModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxWheelModule });\nNgxWheelModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxWheelComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-wheel',\n                template: `\n    <canvas (click)='!disableSpinOnClick && spin()' id='canvas' [width]='width' [height]='height'>\n        Canvas not supported, use another browser.\n    </canvas>\n`\n            }]\n    }], function () { return []; }, { onSpinStart: [{\n            type: Output\n        }], onSpinComplete: [{\n            type: Output\n        }], height: [{\n            type: Input\n        }], idToLandOn: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], items: [{\n            type: Input\n        }], spinDuration: [{\n            type: Input\n        }], spinAmount: [{\n            type: Input\n        }], innerRadius: [{\n            type: Input\n        }], pointerStrokeColor: [{\n            type: Input\n        }], pointerFillColor: [{\n            type: Input\n        }], disableSpinOnClick: [{\n            type: Input\n        }], textOrientation: [{\n            type: Input\n        }], textAlignment: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxWheelModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxWheelComponent],\n                imports: [],\n                exports: [NgxWheelComponent]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxWheelModule, { declarations: [NgxWheelComponent], exports: [NgxWheelComponent] }); })();\n\n/*\n * Public API Surface of ngx-wheel\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxWheelComponent, NgxWheelModule, TextAlignment, TextOrientation };\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["isPlatformBrowser","PLATFORM_ID","NgxWheelComponent","TextAlignment","TextOrientation","i0","ctx_r3","ctx_r5","ctx_r2","ctx_r6","SpinnerComponent","constructor","platformId","Array","keys","HORIZONTAL","OUTER","window","innerWidth","height","width","ngOnInit","idToLandOn","seed","Math","floor","random","length","colors","items","map","value","i","fillStyle","text","id","textFillStyle","textFontSize","ngAfterViewInit","reset","wheel","before","spin","prize","Promise","resolve","setTimeout","after","audio","nativeElement","play","alert","imageLoaded","imageLoading","selectors","viewQuery","ctx"],"sourceRoot":"webpack:///"}